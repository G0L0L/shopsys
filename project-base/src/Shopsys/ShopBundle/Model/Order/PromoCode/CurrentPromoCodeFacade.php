<?php

declare(strict_types=1);

namespace Shopsys\ShopBundle\Model\Order\PromoCode;

use Shopsys\FrameworkBundle\Component\Domain\Domain;
use Shopsys\FrameworkBundle\Model\Customer\CurrentCustomer;
use Shopsys\FrameworkBundle\Model\Order\PromoCode\CurrentPromoCodeFacade as BaseCurrentPromoCodeFacade;
use Shopsys\FrameworkBundle\Model\Order\PromoCode\Exception\InvalidPromoCodeException;
use Shopsys\FrameworkBundle\Model\Order\PromoCode\PromoCodeFacade;
use Shopsys\FrameworkBundle\Model\Pricing\Currency\Currency;
use Symfony\Component\HttpFoundation\Session\SessionInterface;

class CurrentPromoCodeFacade extends BaseCurrentPromoCodeFacade
{
    /** @var Domain */
    protected $domain;

    /** @var Currency */
    protected $currency;

    /** @var CurrentCustomer */
    protected $customer;

    public function __construct(
        PromoCodeFacade $promoCodeFacade,
        SessionInterface $session,
        Domain $domain,
        CurrentCustomer $currentCustomer
    ) {
        parent::__construct($promoCodeFacade, $session);
        $this->domain = $domain;
        $this->customer = $currentCustomer;
    }

    public function getValidEnteredPromoCodeOrNull()
    {
        return parent::getValidEnteredPromoCodeOrNull(); // TODO: Change the autogenerated stub
    }

    public function setEnteredPromoCode($enteredCode)
    {
        $promoCode = $this->promoCodeFacade->findPromoCodeByCode($enteredCode);

        if ($promoCode === null) {
            throw new InvalidPromoCodeException($enteredCode);
        }

        $this->verifyPromoCode($promoCode);

        $this->session->set(static::PROMO_CODE_SESSION_KEY, $enteredCode);
    }

    protected function verifyPromoCode(PromoCode $promoCode): void
    {
        if (($promoCode->getDomain() && $promoCode->getDomain() !== $this->domain->getId())
        //    || ($promoCode->getCurrency() && $promoCode->getCurrency()->getId() !== $this->domain->getId())
            || ($promoCode->getCustomer() && $this->customer->findCurrentUser()
            && $promoCode->getCustomer()->getId() !== $this->customer->findCurrentUser()->getId())
        ) {
            throw new InvalidPromoCodeException($promoCode->getCode());
        }
    }

}
